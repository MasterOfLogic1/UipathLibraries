<Activity mc:Ignorable="sap sap2010" x:Class="GetAvailableCredential" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ss="clr-namespace:System.Security;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="The Ochestrator folder name where all credential to be used can be found" Name="sharedOchestratorFolderName" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="The ochestrator folder name where your traget RPA process would run. if left blank the top level tenant folder is used" Name="topLevelOchestratorFolderName" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="The username returned" Name="targetUsername" Type="OutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="The password returned" Name="targetPassword" Type="OutArgument(ss:SecureString)" />
    <x:Property sap2010:Annotation.AnnotationText=" is a list of credential asset names stored in the shared folder within UiPath Orchestrator" Name="listOfCredentialAssetNamesInSharedFolder" Type="InArgument(s:String[])" />
  </x:Members>
  <this:GetAvailableCredential.listOfCredentialAssetNamesInSharedFolder>
    <InArgument x:TypeArguments="s:String[]" />
  </this:GetAvailableCredential.listOfCredentialAssetNamesInSharedFolder>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>600.8,5396.8</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>GetAvailableCredential_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Text.Json</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>Newtonsoft.Json</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>System.Text.Json</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="The GetAvailableCredential workflow is designed to identify and retrieve an available credential asset from a specified Orchestrator folder. It accomplishes this by comparing a list of predefined asset credential names against those currently stored in the Credential Manager, which serves as a cache for the credentials in use.&#xA;&#xA;The Credential Manager is essentially an asset that temporarily stores used credential asset names and job IDs in JSON text format as the value of the asset. Job IDs uniquely identify a running process and can be retrieved using the Get Job activity.&#xA;&#xA;To find an available credential, the workflow iterates through the list of asset names and checks each one to determine if it is currently in use. It selects the first asset name that is absent from the Credential Manager, ensuring that it is not being utilized by any other processes.&#xA;&#xA;Once an available credential asset name is identified, the workflow retrieves the corresponding username and password using a UiPath Get Credential activity. Following this, the job ID and the name of the used credential asset are registered in the Credential Manager. This registration process prevents other robots that reference this program from using the same credential, thereby ensuring that only free and unused assets are selected for operations.&#xA;&#xA;This workflow serves as the entry point for the program, where the following actions occur:&#xA;&#xA;1.) Default Folder Names: If the variable `sharedOrchestratorFolderName` is not declared, the program defaults to &quot;Shared.&quot; Similarly, if `topLevelOrchestratorFolderName` is not declared, it defaults to &quot;/&quot;, representing the top-level tenant folder. The `CredentialManager` asset is utilized to cache the credentials that are currently in use.&#xA;&#xA;2.) CreateCredentialManagerAssetIfNotExisting: This workflow creates a text value asset named `CredentialManager` in the specified Orchestrator folder if it does not already exist. Upon its initial creation, the asset's default value will be a JSON string: `{&quot;CredentialName&quot;:&quot;JobId&quot;}`. This format indicates that it will store a JSON object containing the properties `CredentialName` and `JobId`.&#xA;&#xA;3.) ReadAndUpdateCredentialManager: This workflow gets a list of active jobs from the Credential Manager Asset, where job information is stored as JSON text. First, it uses the Orchestrator API to find all jobs that are currently running or pending, which are called active jobs.&#xA;For each active job, if the job ID is found in the Credential Manager's JSON text, it is kept. If there are older jobs that are no longer active, they are removed from the JSON text. Finally, the updated JSON text is saved back to the Credential Manager Asset and retruned in a Credential Manger Dictionary.&#xA;&#xA;4.) Iterate Asset Names: The program iterates through all credential asset names retreived in (1), checking for its absence in the Credential Manger Dictionary from (4). Upon finding an asset that is not currently in use (i.e not present in Credential Manager Dictionary), the program captures its name and exits the loop. This asset name represents an available resource ready for use.&#xA;&#xA;If step (4) successfully returns a credential asset name, then (5) and (6) are executed:&#xA;&#xA;5. ) GetCredentialActivity: This workflow uses the retrieved asset name to invoke the UiPath `GetCredential` activity, fetching the corresponding credential (user name and password) .&#xA;&#xA;6. ) AddCurrentJobIdToCredentialManager`**: This workflow registers the job ID of the current process with the asset name in the Credential Manager. It updates the associated value in the JSON text format. For instance, if the job ID is 56sg672628-67126gh1jj2, the JSON text will be updated to {&quot;CredentialName&quot;:&quot;JobId&quot;,&quot;Credential1&quot;:&quot;asxdf&quot;}. This ensures that any subsequent programs that access this library cannot use Credential1 while the job ID [asxdf] is still running or pending.&#xA;&#xA;7. ) Error Handling**: If step 5 does not return a credential asset name, the program throws an error." DisplayName="GetAvailableCredential" sap:VirtualizedContainerService.HintSize="592,5332" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="ui:CurrentJobInfo" Name="jobInfo" />
      <Variable x:TypeArguments="x:String" Name="credentialManager" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Name="credentialLogConfig" />
      <Variable x:TypeArguments="x:String" Name="assetNameOfAvailableCredential" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:Comment sap:VirtualizedContainerService.HintSize="529.6,568.8" sap2010:WorkflowViewState.IdRef="Comment_1" Text="The GetAvailableCredential workflow is designed to identify and retrieve an available credential asset from a specified Orchestrator folder. It accomplishes this by comparing a list of predefined asset credential names against those currently stored in the Credential Manager, which serves as a cache for the credentials in use.&#xA;&#xA;The Credential Manager is essentially an asset that temporarily stores used credential asset names and job IDs in JSON text format as the value of the asset. Job IDs uniquely identify a running process and can be retrieved using the Get Job activity.&#xA;&#xA;To find an available credential, the workflow iterates through the list of asset names and checks each one to determine if it is currently in use. It selects the first asset name that is absent from the Credential Manager, ensuring that it is not being utilized by any other processes.&#xA;&#xA;Once an available credential asset name is identified, the workflow retrieves the corresponding username and password using a UiPath Get Credential activity. Following this, the job ID and the name of the used credential asset are registered in the Credential Manager. This registration process prevents other robots that reference this program from using the same credential, thereby ensuring that only free and unused assets are selected for operations.&#xA;&#xA;This workflow serves as the entry point for the program, where the following actions occur:&#xA;&#xA;1.) Default Folder Names: If the variable `sharedOrchestratorFolderName` is not declared, the program defaults to &quot;Shared.&quot; Similarly, if `topLevelOrchestratorFolderName` is not declared, it defaults to &quot;/&quot;, representing the top-level tenant folder. The `CredentialManager` asset is utilized to cache the credentials that are currently in use.&#xD;&#xA;&#xD;&#xA;The ValidateListOfCredentialAssetNamesProvided workflow checks the validity of a list of credential asset names provided. It verifies that each asset name in the provided list meets exist in the Orchestrator.&#xA;&#xA;2.) CreateCredentialManagerAssetIfNotExisting: This workflow creates a text value asset named `CredentialManager` in the specified Orchestrator folder if it does not already exist. Upon its initial creation, the asset's default value will be a JSON string: `{&quot;CredentialName&quot;:&quot;JobId&quot;}`. This format indicates that it will store a JSON object containing the properties `CredentialName` and `JobId`.&#xA;&#xA;3.) ReadAndUpdateCredentialManager: This workflow gets a list of active jobs from the Credential Manager Asset, where job information is stored as JSON text. First, it uses the Orchestrator API to find all jobs that are currently running or pending, which are called active jobs.&#xA;For each active job, if the job ID is found in the Credential Manager's JSON text, it is kept. If there are older jobs that are no longer active, they are removed from the JSON text. Finally, the updated JSON text is saved back to the Credential Manager Asset and retruned in a Credential Manger Dictionary.&#xA;&#xA;4.) Iterate Asset Names: The program iterates through all credential asset names retreived in (1), checking for its absence in the Credential Manger Dictionary from (4). Upon finding an asset that is not currently in use (i.e not present in Credential Manager Dictionary), the program captures its name and exits the loop. This asset name represents an available resource ready for use.&#xA;&#xA;If step (4) successfully returns a credential asset name, then (5) and (6) are executed:&#xA;&#xA;5. ) GetCredentialActivity: This workflow uses the retrieved asset name to invoke the UiPath `GetCredential` activity, fetching the corresponding credential (user name and password) .&#xA;&#xA;6. ) AddCurrentJobIdToCredentialManager`**: This workflow registers the job ID of the current process with the asset name in the Credential Manager. It updates the associated value in the JSON text format. For instance, if the job ID is 56sg672628-67126gh1jj2, the JSON text will be updated to {&quot;CredentialName&quot;:&quot;JobId&quot;,&quot;Credential1&quot;:&quot;asxdf&quot;}. This ensures that any subsequent programs that access this library cannot use Credential1 while the job ID [asxdf] is still running or pending.&#xA;&#xA;7. ) Error Handling**: If step 5 does not return a credential asset name, the program throws an error." />
    <ui:MultipleAssign sap2010:Annotation.AnnotationText="If sharedOrchestratorFolderName is not declared, the program will default to using Shared.&#xA;&#xA;Similarly, if topLevelOrchestratorFolderName is not declared, the program will default to using /, which represents the top-level tenant folder.&#xA;&#xA;The CredentialManager asset is used to cache the credentials currently in use.&#xA;" DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="529.6,352" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[sharedOchestratorFolderName]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[If(String.IsNullOrEmpty(sharedOchestratorFolderName),"Shared",sharedOchestratorFolderName)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[topLevelOchestratorFolderName]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[If(String.IsNullOrEmpty(topLevelOchestratorFolderName),"/",topLevelOchestratorFolderName)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[credentialManager]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">CredentialManager</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:MultipleAssign>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="The ValidateListOfCredentialAssetNamesProvided workflow checks the validity of a list of credential asset names provided. It verifies that each asset name in the provided list meets exist in the Orchestrator." DisplayName="ValidateListOfCredentialAssetNamesProvided - Invoke Workflow File (CredentialManagerProject\ValidateListOfCredentialAssetNamesProvided.xaml)" sap:VirtualizedContainerService.HintSize="529.6,282.4" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="CredentialManagerProject\ValidateListOfCredentialAssetNamesProvided.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="sharedOchestratorFolderName">[sharedOchestratorFolderName]</InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="listOfCredentialAssetNamesInSharedFolder">[listOfCredentialAssetNamesInSharedFolder]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="This workflow creates a text value asset named `CredentialManager` in the specified Orchestrator folder if it does not already exist. Upon its initial creation, the asset's default value will be a JSON string: `{&quot;CredentialName&quot;:&quot;JobId&quot;}`. This format indicates that it will store a JSON object containing the properties `CredentialName` and `JobId`." DisplayName="CreateCredentialManagerAssetIfNotExisting" sap:VirtualizedContainerService.HintSize="529.6,330.4" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="CredentialManagerProject\CreateCredentialManagerAssetIfNotExisting.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="sharedOchestratorFolderName">[sharedOchestratorFolderName]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="credentialManager">[credentialManager]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="This workflow gets a list of active jobs from the Credential Manager Asset, where job information is stored as JSON text. First, it uses the Orchestrator API to find all jobs that are currently running or pending, which are called active jobs.&#xA;For each active job, if the job ID is found in the Credential Manager's JSON text, it is kept. If there are older jobs that are no longer active, they are removed from the JSON text. Finally, the updated JSON text is saved back to the Credential Manager Asset." DisplayName="ReadAndUpdateCredentialManager" sap:VirtualizedContainerService.HintSize="529.6,378.4" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="CredentialManagerProject\ReadAndUpdateCredentialManager.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="credentialManger">[credentialManager]</InArgument>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="credentialLogConfig">[credentialLogConfig]</OutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="topLevelOchestratorFolderName">[topLevelOchestratorFolderName]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="sharedOchestratorFolderName">[sharedOchestratorFolderName]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeWorkflowFile>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="529.6,174.4" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;looking for an available asset name&quot;]" />
    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="**Iterate Asset Names**: The program iterates through all credential asset names retreived in (1), checking for its absence in the Credential Manger Dictionary from (4). Upon finding an asset that is not currently in use (i.e not present in Credential Manager Dictionary), the program captures its name and exits the loop. This asset name represents an available resource ready for use." DisplayName="For Each assetName" sap:VirtualizedContainerService.HintSize="529.6,668.8" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[listOfCredentialAssetNamesInSharedFolder]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:String">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:String" Name="assetName" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="496,430.4" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Assign sap2010:Annotation.AnnotationText=" checking if asset name is absent in the Credential Manger Dictionary from (4)." DisplayName="Set Available asset if possible" sap:VirtualizedContainerService.HintSize="433.6,157.6" sap2010:WorkflowViewState.IdRef="Assign_1">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[assetNameOfAvailableCredential]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[if(Not credentialLogConfig.Keys.Contains(assetName),assetName,Nothing)]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
            <If sap2010:Annotation.AnnotationText="Upon finding an asset that is not currently in use (i.e not present in Credential Manager Dictionary), the program captures its name and exits the loop" Condition="[Not String.IsNullOrEmpty(assetNameOfAvailableCredential)]" sap:VirtualizedContainerService.HintSize="433.6,184" sap2010:WorkflowViewState.IdRef="If_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,196.8" sap2010:WorkflowViewState.IdRef="Sequence_3">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:Break sap2010:Annotation.AnnotationText="Upon finding an asset that is not currently in use (i.e not present in Credential Manager Dictionary), the program captures its name and exits the loop" sap:VirtualizedContainerService.HintSize="353.6,108" sap2010:WorkflowViewState.IdRef="Break_1">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:Break>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,104.8" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
    <If sap2010:Annotation.AnnotationText="We throw a eception if there are no assets available" Condition="[String.IsNullOrEmpty(assetNameOfAvailableCredential)]" sap:VirtualizedContainerService.HintSize="529.6,1430.4" sap2010:WorkflowViewState.IdRef="If_1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="416,202.4" sap2010:WorkflowViewState.IdRef="Sequence_6">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Throw Exception="[New SystemException(&quot;No Credential available at the moment&quot;)]" sap:VirtualizedContainerService.HintSize="353.6,113.6" sap2010:WorkflowViewState.IdRef="Throw_1" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,1026.4" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="353.6,174.4" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;Retrieving  available credential&quot;]" />
          <ui:GetRobotCredential TimeoutMS="{x:Null}" sap2010:Annotation.AnnotationText="Uses the retrieved asset name in a UiPath GetCredential activity, to  fetch the corresponding credential (user name and password) ." AssetName="[assetNameOfAvailableCredential]" CacheStrategy="None" DisplayName="GetCredential" FolderPath="[sharedOchestratorFolderName]" sap:VirtualizedContainerService.HintSize="353.6,235.2" sap2010:WorkflowViewState.IdRef="GetRobotCredential_1" Password="[targetPassword]" Username="[targetUsername]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:GetRobotCredential>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="353.6,174.4" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;Retrieved &quot;+ targetUsername]" />
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="This workflow registers the job ID of the current process with the asset name in the Credential Manager. It updates the associated value in the JSON text format. For instance, if the job ID is 56sg672628-67126gh1jj2, the JSON text will be updated to {&quot;CredentialName&quot;:&quot;JobId&quot;,&quot;Credential1&quot;:&quot;asxdf&quot;}. This ensures that any subsequent programs that access this library cannot use Credential1 while the job ID [asxdf] is still running or pending." DisplayName="AddCurrentJobIdToCredentialManager" sap:VirtualizedContainerService.HintSize="353.6,353.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="CredentialManagerProject\AddCurrentJobIdToCredentialManager.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="sharedOchestratorFolderName">[sharedOchestratorFolderName]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="topLevelOchestratorFolderName">[topLevelOchestratorFolderName]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="credentialLogConfig">[credentialLogConfig]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="credentialManger">[credentialManager]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="assetNameOfAvailableCredential">[assetNameOfAvailableCredential]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeWorkflowFile>
        </Sequence>
      </If.Else>
    </If>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="529.6,165.6" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Available Credential : username &quot; +targetUsername]" />
  </Sequence>
</Activity>